class ~~EntityClass~~(
        Entity,
        EntityCreateMixin,
        EntityDeleteMixin,
        EntityReadMixin,
        EntitySearchMixin,
        EntityUpdateMixin):
    """A representation of a ~~Entity Name~~ entity."""

    def __init__(self, server_config=None, **kwargs):
        self._fields = {
            ~~Field List~~
        }
        self._meta = {
            'api_path': '~~base path~~',
            'server_modes': ('sat', 'sam'),
        }
        super(~~EntityClass~~, self).__init__(server_config, **kwargs)

    def path(self, which=None):
        """Extend ``nailgun.entity_mixins.Entity.path``.

        The format of the returned path depends on the value of ``which``:

        ~~methods paths~~

        ``super`` is called otherwise.

        """
        if which in (
                ~~method names~~):
            return '{0}/{1}'.format(
                super(~~EntityClass~~, self).path(which='self'),
                which
            )
        return super(~~EntityClass~~, self).path(which)

~~entity methods~~